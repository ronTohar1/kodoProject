import json
import requests
from utilities import MALWARE_PATH, BENIGN_PATH, MINERS_PATH, MINER_LABEL, NON_MINER_LABEL, NUMBER_OF_FILES
import pefile
import os
from zipfile import ZipFile

api_key = "7e8fa83574d0a78b37b37daa819f6069"
url = "https://mb-api.abuse.ch/api/v1/"

def check_is_pe(file):
    try:
        pe = pefile.PE(file)
        return True
    except pefile.PEFormatError:
        return False

def download_hashes(hashes):
    name = "file_"
    for i,hash in enumerate(hashes):
        post_data2 = {"query": "get_file",
                        "sha256_hash": str(hash)}
        response = requests.post(url, data=post_data2)
        res_type = response.headers['content-type']
        if res_type == 'application/json':
            data = response.json()
            print(data)
        if res_type == 'application/zip':
            with open(f"{MINERS_PATH}/{name}{i}.zip", "wb") as f:
                f.write(response.content)
                print("Zip file successfully downloaded.")
                # # unzip with password = "infected"
                # with ZipFile(f"{MINERS_PATH}/{name}{i}.zip", 'r') as zipObj:
                #     zipObj.extractall(f"{MINERS_PATH}", pwd=b"infected")


                # # check if it is a PE file
                # if check_is_pe(f"{MINERS_PATH}/{name}{i}"):
                #     counter += 1
                #     print("PE file successfully downloaded.")
                # else:
                #     os.remove(f"{MINERS_PATH}/{name}{i}.exe")
                # os.remove(f"{MINERS_PATH}/{name}{i}.zip")



# def get_non_miners():
#     number_of_non_miners = 750
#     post_data = {"query":"get_file_type", "user":"abuse.ch", }
#     response = requests.post(url, data=post_data)
#     res_type = response.headers['content-type']
#     if res_type == 'application/json':
#         data = response.json()
#         data = data['data']
#         hashes = [x['sha256_hash'] for x in data if 'exe' in x['tags'] and x['tags'] != 'coinminer' and x['tags'] != "CryptOne" and 'miner' not in [y.lower() for y in x['tags']] and len(x['tags']) > 1]
#         if len(hashes) > number_of_non_miners:
#             download_hashes(hashes[:number_of_non_miners])
#         else:
#             print(len(hashes))
#             download_hashes(hashes)

#     else:
#         print("Request failed with status code:", response.status_code)

def get_miners():
    post_data = {"query": "get_taginfo",
                "tag":"coinminer", "limit":"700", "type":"exe"}

    # Make the API request
    response = requests.post(url, data=post_data, )
    name = "file_"


    # Check if the request was successful
    if response.status_code == 200:
        res_type = response.headers['content-type']
        if res_type == 'application/json':
            data = response.json()
            hashes = [x['sha256_hash'] for x in data['data']]
        
        download_hashes(hashes)
        
    else:
        # Handle the error
        print("Request failed with status code:", response.status_code)


def main():
    get_miners()

if __name__ == "__main__":
    main()